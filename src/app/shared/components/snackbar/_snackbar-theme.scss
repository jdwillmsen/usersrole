@use 'sass:map';
@use '@angular/material' as mat;

@mixin color($theme) {
  $color-config: mat.get-color-config($theme);
  $primary-palette: map.get($color-config, 'primary');
  $accent-palette: map.get($color-config, 'accent');
  $warn-palette: map.get($theme, 'warn');
  $error-palette: map.get($theme, 'error');
  $success-palette: map.get($theme, 'success');
  $info-palette: map.get($theme, 'info');

  $primary-color: mat.get-color-from-palette($primary-palette, default);
  $accent-color: mat.get-color-from-palette($accent-palette, default);
  $warn-color: mat.get-color-from-palette($warn-palette, default);
  $error-color: mat.get-color-from-palette($error-palette, default);
  $success-color: mat.get-color-from-palette($success-palette, default);
  $info-color: mat.get-color-from-palette($info-palette, default);

  $primary-color-contrast: mat.get-color-from-palette(
    $primary-palette,
    default-contrast
  );
  $accent-color-contrast: mat.get-color-from-palette(
    $accent-palette,
    default-contrast
  );
  $warn-color-contrast: mat.get-color-from-palette(
    $warn-palette,
    default-contrast
  );
  $error-color-contrast: mat.get-color-from-palette(
    $error-palette,
    default-contrast
  );
  $success-color-contrast: mat.get-color-from-palette(
    $success-palette,
    default-contrast
  );
  $info-color-contrast: mat.get-color-from-palette(
    $info-palette,
    default-contrast
  );

  @include _variant('primary', $primary-color, $primary-color-contrast);
  @include _variant('accent', $accent-color, $accent-color-contrast);
  @include _variant('warn', $warn-color, $warn-color-contrast);
  @include _variant('error', $error-color, $error-color-contrast);
  @include _variant('success', $success-color, $success-color-contrast);
  @include _variant('info', $info-color, $info-color-contrast);
}

@mixin typography($theme) {
  $typography-config: mat.get-typography-config($theme);

  .mat-mdc-snack-bar-container {
    .mat-mdc-snack-bar-label.mdc-snackbar__label {
      font-size: 16px;
      font-weight: 500;
      white-space: pre-wrap;
    }
  }

  .icon.mat-mdc-snack-bar-container {
    .mdc-snackbar__surface {
      padding-right: 0;
    }

    .mdc-snackbar__label {
      padding-right: 0;
    }
  }
}

@mixin theme($theme) {
  $color-config: mat.get-color-config($theme);

  @if $color-config != null {
    @include color($theme);
  }

  $typography-config: mat.get-typography-config($theme);

  @if $typography-config != null {
    @include typography($theme);
  }
}

@mixin _variant($type, $color, $color-contrast) {
  .#{$type}.mat-mdc-snack-bar-container {
    .mdc-snackbar__surface {
      --mdc-snackbar-container-color: #{color-mix(
          in srgb,
          $color 25%,
          transparent
        )};
      --mdc-snackbar-supporting-text-color: #{$color};
    }
  }

  .#{$type}.filled.mat-mdc-snack-bar-container {
    .mdc-snackbar__surface {
      --mdc-snackbar-container-color: #{$color};
      --mdc-snackbar-supporting-text-color: #{$color-contrast};
    }
  }

  .#{$type}.outlined.mat-mdc-snack-bar-container {
    border: 1px solid $color;
    border-radius: 4px;

    .mdc-snackbar__surface {
      --mdc-snackbar-container-color: #{transparent};
      --mdc-snackbar-supporting-text-color: #{$color};
    }
  }
}
